---
import { languages } from '../i18n/ui';
import { getLangFromUrl } from '../i18n/utils';

const currentLang = getLangFromUrl(Astro.url);
---

<div class="language-selector relative inline-block">
  <select 
    id="language-select" 
    class="bg-white border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
  >
    {Object.entries(languages).map(([lang, name]) => (
      <option value={lang} selected={lang === currentLang}>
        {name}
      </option>
    ))}
  </select>
</div>

<script>
  document.getElementById('language-select')?.addEventListener('change', (e) => {
    const select = e.target as HTMLSelectElement;
    const newLang = select.value;
    const currentPath = window.location.pathname;
    
    // Remove current language from path if present and normalize
    let pathWithoutLang = currentPath.replace(/^\/(en|nl|cs|da)/, '') || '/';
    
    // Ensure path starts with /
    if (!pathWithoutLang.startsWith('/')) {
      pathWithoutLang = '/' + pathWithoutLang;
    }
    
    // Remove trailing slash except for root, but keep it for directories
    if (pathWithoutLang !== '/' && pathWithoutLang.endsWith('/')) {
      pathWithoutLang = pathWithoutLang.slice(0, -1);
    }
    
    // Add new language prefix (except for default language 'en')
    let newPath;
    if (newLang === 'en') {
      newPath = pathWithoutLang === '/' ? '/' : pathWithoutLang + '/';
    } else {
      newPath = pathWithoutLang === '/' ? `/${newLang}/` : `/${newLang}${pathWithoutLang}/`;
    }
    
    // Navigate to new path
    console.log('Navigating from', currentPath, 'to', newPath);
    window.location.href = newPath;
  });
</script>

<style>
  .language-selector select {
    cursor: pointer;
  }
</style>
